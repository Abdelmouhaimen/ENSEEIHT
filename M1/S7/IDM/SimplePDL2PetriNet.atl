-- @path SimplePDL=/n7.SimplePDL.fr/SimplePDL.ecore
-- @path PetriNet=/n7.PetriNet.fr/PetriNet.ecore

module SimplePDL2PetriNet;
create OUT : PetriNet from IN : SimplePDL;

helper context SimplePDL!ProcessElement
def: getProcess() : SimplePDL!Process =
SimplePDL!Process.allInstances()->select(e | e.processElements->includes(self));
-- Traduire un Process en un PetriNet de m�me nom

helper context SimplePDL!Process 
def : getPetriNetElement(): PetriNet!PetriNetElement =
	PetriNet!PetriNetElement.allInstances()->asSequence();





rule Process2PetriNet {
	from p: SimplePDL!Process
	to petrinet: PetriNet!PetriNet (
		name <- p.name,
		petrinetelement <- p.getPetriNetElement()
		)
}

--Pour chaque élément WorkDefinition, on veut créer un élément motif de même nom.
rule WD2PetriNet {
	from wd : SimplePDL!WorkDefinition
	to
	--Place
 	 p_ready: PetriNet!Place(
 		  name <- wd.name + '_ready',
 		  jetons <- 1),
 		 
 			
  	 p_running: PetriNet!Place(
  		 name <- wd.name + '_running',
  		 jetons <- 0),
 	
  	 p_finished: PetriNet!Place(
  		 name <- wd.name + '_finished',
  		 jetons <- 0),
 		
  	 p_started: PetriNet!Place(
  		 name <- wd.name + '_started',
  		 jetons <- 0),
 		
	--Transitions
  
 	t_start: PetriNet!Transition(name <- wd.name + '_start'), 		
    t_finish: PetriNet!Transition(name <- wd.name + '_finish'),
	
 	--Edges
	
 	 e_r_s: PetriNet!Edge(
 	 	type <- #normal,
  		 entree <- p_ready,
  		 sortie <- t_start,
  		 poids <- 1
  		 ),
 	
 	 e_s_sd: PetriNet!Edge(
 	 	 type <- #normal,
  		 entree <- t_start,
  		 sortie <- p_started,
  		 poids <- 1
  		),
 	
  	 e_s_rg: PetriNet!Edge(
  	 	type <- #normal,
  		 entree <- t_start,
  		 sortie <- p_running,
  		 poids <- 1
  		 ),
 	
  	 e_rg_f: PetriNet!Edge(
  	 	type <- #normal,
  		 entree <- p_running,
  		 sortie <- t_finish,
  		 poids <- 1
  		 ),
 	
  	 e_f_fd: PetriNet!Edge(
  	 	 type <- #normal,
  		 entree <- t_finish,
  		 sortie <- p_finished,
  		 poids <- 1
  		)
}


rule WorkSequence2PetriNet {
	from ws: SimplePDL!WorkSequence
	to
		edge_ws : PetriNet!Edge(type <- #readArc
			,poids <- 1
			,entree <- thisModule.resolveTemp(ws.predecessor,'p'+
				(if ((ws.linkType = #finishToFinish) or (ws.linkType = #finishToStart))
					then '_finished'
					else  '_started'
					endif))
			,sortie <- thisModule.resolveTemp(ws.successor,'t' + 
				(if ((ws.linkType = #finishToStart) or (ws.linkType = #startToStart))
					then  '_start'
					else '_finish'
					endif))
					)
}

rule R2PetriNet {
	from ressource: SimplePDL!Ressource    
	to
  	  p_ressource: PetriNet!Place(name <- ressource.name,
  	  	jetons <- ressource.quantite)
}

rule rs2PetriNet {
	from amount : SimplePDL!Amount
	to
	a_demande : PetriNet!Edge(
  	  type <- #normal ,
  	  entree <- amount.ressource,
  	  sortie <-thisModule.resolveTemp(amount.workdefinition,'t_start'),
	  poids <- amount.nbOccurences
  	  ),
	a_libere :  PetriNet!Edge(
  	  type <- #normal ,
  	  sortie <- amount.ressource,
  	  entree <-thisModule.resolveTemp(amount.workdefinition,'t_finish'),
	  poids <- amount.nbOccurences
  	  )  		 
  	 
}


