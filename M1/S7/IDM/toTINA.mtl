[comment encoding = UTF-8 /]
[module toTINA('http://petrinet')]


[template public petriNetToTINA(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let places : OrderedSet(Place) = aPetriNet.getPlaces()]
[if (places->size() > 0)]
	[for (place : Place |places)]
pl [place.name/] ([place.jetons/])
	[/for]
[else]
None.
[/if]
[/let]
[let transitions: OrderedSet(Transition) =aPetriNet.getTransitions()]
	[for (tr: Transition |transitions)]
tr [tr.name/] [transtionsources(tr.getSources())/] -> [transitioncibles(tr.getCibles())/]
	[/for]
[/let]
[/file]
[/template]

[query public getPlaces(p:PetriNet) : OrderedSet(Place) =
	p.petrinetelement -> select (e |e.oclIsTypeOf(Place))
	->collect( e | e.oclAsType(Place) )
	->asOrderedSet()
/]

[query public getTransitions(p:PetriNet) : OrderedSet(Transition)=
	p.petrinetelement -> select (e |e.oclIsTypeOf(Transition))
	->collect( e | e.oclAsType(Transition) )
	->asOrderedSet()
/]

[query public getSources(p :Transition) : OrderedSet(Edge)=
	p.linksToEntree -> select (e |e.oclIsTypeOf(Edge))
	->collect( e | e.oclAsType(Edge) )
	->asOrderedSet()
/]
[query public getCibles(p :Transition) : OrderedSet(Edge)=
	p.linksToSortie -> select (e |e.oclIsTypeOf(Edge))
	->collect( e | e.oclAsType(Edge) )
	->asOrderedSet()
/]

[template public transtionsources(edges:OrderedSet(Edge)) post (trim())]
	[for ( edge :Edge |edges) separator(' ')] [if edge.type = arcType::normal] [edge.entree.name/][if edge.poids >1 ]*[edge.poids/][/if] [else] [edge.entree.name/]?[edge.poids/] [/if][/for]
[/template]

[template public transitioncibles(edges:OrderedSet(Edge)) post (trim())]
	[for ( edge :Edge |edges) separator(' ') ] [edge.sortie.name/][if edge.poids >1 ]*[edge.poids/][/if] [/for]
[/template]
